name: Test Automation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: automation/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: automation

      - name: Run unit tests
        run: |
          mkdir -p test-results/unit/logs
          mkdir -p test-results/unit/junit
          mkdir -p coverage/unit
          set -o pipefail
          npm run test:unit | tee test-results/unit/logs/unit-tests.log
        working-directory: automation

      - name: Unit test summary
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Unit Tests
          path: automation/test-results/unit/junit/*.xml
          reporter: jest-junit

      - name: Upload unit test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-artifacts
          path: automation/test-results/unit

      - name: Upload unit test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: automation/coverage/unit

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: automation/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: automation

      - name: Display system information
        run: |
          echo "Docker version:"
          docker --version
          echo "Docker Compose version:"
          docker compose version
          echo "Node.js version:"
          node --version

      - name: Run integration tests
        run: |
          mkdir -p test-results/integration/jest
          mkdir -p test-results/integration/junit
          set -o pipefail
          npm run test:integration | tee test-results/integration/jest/integration-tests.log
        working-directory: automation

      - name: Integration test summary
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Integration Tests
          path: automation/test-results/integration/junit/*.xml
          reporter: jest-junit

      - name: Capture container logs
        if: always()
        run: |
          mkdir -p test-results/integration/container-logs
          for service in target_1 target_2 splitter agent; do
            docker compose logs --no-color "$service" > "test-results/integration/container-logs/${service}.log" 2>&1 || echo "No logs captured for $service" > "test-results/integration/container-logs/${service}.log"
          done
          docker compose ps -a > test-results/integration/container-logs/compose-ps.log 2>&1 || true
        working-directory: automation

      - name: Collect pipeline artifacts
        if: always()
        run: |
          mkdir -p test-results/integration
          if [ -d artifacts ]; then
            cp -r artifacts test-results/integration/
          else
            echo "No artifacts directory found" > test-results/integration/artifacts-missing.log
          fi
        working-directory: automation

      - name: Cleanup environment
        if: always()
        run: docker compose down -v
        working-directory: automation

      - name: Upload integration test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-artifacts
          path: |
            automation/test-results/integration
